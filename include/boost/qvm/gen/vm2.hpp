//Copyright (c) 2009-2011 Emil Dotchevski and Reverge Studios, Inc.

//Distributed under the Boost Software License, Version 1.0. (See accompanying
//file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_QVM_F622919DE18B1FDAB0CA992B9729D49
#define BOOST_QVM_F622919DE18B1FDAB0CA992B9729D49

//This file was generated by a program. Do not edit manually.

#include <boost/qvm/deduce_v.hpp>
#include <boost/qvm/enable_if.hpp>
#include <boost/qvm/inline.hpp>
#include <boost/qvm/m_traits.hpp>

namespace
boost
    {
    namespace
    qvm
        {
        template <class A,class B>
        BOOST_QVM_INLINE_OPERATIONS
        typename lazy_enable_if_c<
            m_traits<A>::rows==2 && m_traits<A>::cols==2 &&
            v_traits<B>::dim==2,
            deduce_v2<A,B,2> >::type
        operator*( A const & a, B const & b )
            {
            typedef typename m_traits<A>::scalar_type Ta;
            typedef typename v_traits<B>::scalar_type Tb;
            Ta const a00 = m_traits<A>::template r<0,0>(a);
            Ta const a01 = m_traits<A>::template r<0,1>(a);
            Ta const a10 = m_traits<A>::template r<1,0>(a);
            Ta const a11 = m_traits<A>::template r<1,1>(a);
            Tb const b0 = v_traits<B>::template r<0>(b);
            Tb const b1 = v_traits<B>::template r<1>(b);
            typedef typename deduce_v2<A,B,2>::type R;
            BOOST_QVM_STATIC_ASSERT(v_traits<R>::dim==2);
            R r;
            v_traits<R>::template w<0>(r)=a00*b0+a01*b1;
            v_traits<R>::template w<1>(r)=a10*b0+a11*b1;
            return r;
            }

        namespace
        sfinae
            {
            using ::boost::qvm::operator*;
            }

        namespace
        qvm_detail
            {
            template <int R,int C>
            struct mul_mv_defined;

            template <>
            struct
            mul_mv_defined<2,2>
                {
                static bool const value=true;
                };
            }

        template <class A,class B>
        BOOST_QVM_INLINE_OPERATIONS
        typename lazy_enable_if_c<
            m_traits<B>::rows==2 && m_traits<B>::cols==2 &&
            v_traits<A>::dim==2,
            deduce_v2<A,B,2> >::type
        operator*( A const & a, B const & b )
            {
            typedef typename v_traits<A>::scalar_type Ta;
            typedef typename m_traits<B>::scalar_type Tb;
            Ta const a0 = v_traits<A>::template r<0>(a);
            Ta const a1 = v_traits<A>::template r<1>(a);
            Tb const b00 = m_traits<B>::template r<0,0>(b);
            Tb const b01 = m_traits<B>::template r<0,1>(b);
            Tb const b10 = m_traits<B>::template r<1,0>(b);
            Tb const b11 = m_traits<B>::template r<1,1>(b);
            typedef typename deduce_v2<A,B,2>::type R;
            BOOST_QVM_STATIC_ASSERT(v_traits<R>::dim==2);
            R r;
            v_traits<R>::template w<0>(r)=a0*b00+a1*b10;
            v_traits<R>::template w<1>(r)=a0*b01+a1*b11;
            return r;
            }

        namespace
        sfinae
            {
            using ::boost::qvm::operator*;
            }

        namespace
        qvm_detail
            {
            template <int R,int C>
            struct mul_vm_defined;

            template <>
            struct
            mul_vm_defined<2,2>
                {
                static bool const value=true;
                };
            }

        }
    }

#endif
